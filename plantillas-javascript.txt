// Curso -> JavaScript - Tamplating (Plantillas)

.// Que son las plantillas?

	.Es la combinacion de la informacion y el dise√±o
	.La informacion y la presentacion se mantienen separados uno del otro
	.Se usa para dar formato a los elementos que se repiten
	.Permite diversos grados de control y flexibilidad entre los motores

	Comunmente en javascript para representar cierta informacion hicimos mas de una vez de esta forma:

	var htmlStr = "<div class='cardInfo'>" +
				"<div>" + person.Name + "</div>" +
				"<div>" + person.Phone + "</div>" +
				"<div>" + person.Address + "</div>" +
				"<div>";

	Se complica representar la informacion de esta forma y no es la optima forma para hacerlo.
	En cambio lo que queremos hacer es tener una plantilla para los datos(informacion) para que se vea de la siguiente manera.

	->Datos>>>
		{
			Name: "Ivan Lopez",
			Phone: "555-1234",
			Address: "Anytown, US"
		}
	->Plantilla>>
		<div>
			<div>{{Name}}</div>
			<div>{{Phone}}</div>
			<div>{{Address}}</div>
		</div>
	Motor de Plantilla combina la informacion con la plantilla para obtener >>
		<div>
			<div>Ivan Lopez</div>
			<div>555-1234</div>
			<div>Anytown, US</div>
		</div>

	El motor de la plantilla evalua la informacion y la ingresa en la plantilla, para mostrar por la pantalla el resultado final.

.// Una rapida encusta sobre los motores de plantillado --

	Hoy en dia hay un monton de diferentes herramientas de plantillas para JavaScript, pero vamos a ver a los mejorcitos del mercado.
		.jQuery Plantilla
		.Mustache
		.Handlebars
		.Dust

	./jQuery Plantilla
		.bastante facil de aprender y usar
		.jQuery lo corre en el tiempo de ejecucion subyacente
		.es bueno para plantillas simples a intermedias

	./Mustache
		.Ampliamente disponible para diferentes lenguajes(JavaScript, Python, PHP, JAVA)
		.Posee una sintaxis simple
		.Es facil de extenderlo a nuestras necesidades

	./Handlebars
		.Es un superconjunto del sistema de plantillado de Mustache
		.Posee varias mejoras
		.Las planillas se pueden pre-compilar para mejorar el rendimiento

	./Dust
		.Es poderoso, pero es mas complejo que otros motores de plantillado
		.Actualmente el desarrollo lo hace Linkedin
		.Es asincronico
		.Posee muchas funciones de ayuda
		.Es complicado de extender a las necesidades

.// Requisitos para el curso
	.Usar un editor de texto de preferencia
	.Instalar Node.js


.- * jQuery Template(planillas) * -.
.// Obtener y usar jQuery Template
	
	.es una libreria de plantillas para jQuery
	.es un plugin para jQuery que aprovecha la sintaxis de jQuery
	.plantillado simple - no hay condiciones o logica
	.usa una simple sintaxis para dar formato a la informacion
	.puede agrupar los conjuntos de datos mas grandes

	El plugin se descarga de la pagina de github de este link:
		https://github.codepb/jquery-template

	Requisito para usar 
		jquery.loadTemplate.js
	Tambien necesitamos el arvhivo de jquery
		jquery-version.js

===============================================
Crear un nuevo proyecto en Git
	Pasos:
		echo "# javascript" >> README.md
		git init
		git add README.md
		git commit -m "first commit"
		git remote add origin https://github.com/appwebcoder/javascript.git
		git push -u origin master



.// Definir la plantilla de jQuery
    1. Crear el elemnto <script>
        <script type="text/html" id="templateID">
            <div class="contentWrapper">
                <div data-content="field1"></div>
                <div data-content="field2"></div>
                <div data-content="field3"></div>
            </div>
        </script>
    2. Agregar el type = "text/html"
        Lo hace es crear es un contenedor que podemos usar para sostener la plantilla que
        podemos recuperar usando el DOM dentro del navegador. Como la etiqueta del
        <script> posee el tipo de text/html, el navegador no intentara ejecutar ningun codigo
        de javascript que se encuentra dentro de la etiqueta <script>.
    3. Agregar el id
        el id es el identificador de la plantilla
    4. Agregar el contenido de la plantilla de html
        Dentro del elemento <script> agregar la plantilla de html que se va a usar pra
        presentar la informacion

    La manera que se usa para indicar a jQuery Template como se va a organizar la informacion en la planilla
    la planilla de jQuery es usando el atributo data-content="" y luego vamos a definir que
    informacion va a contener cada elemento declarando el valor del atributo

    En el ejemplo si tenemos un json con esta informacion que se va a visualizar en la plantilla
    creada mas arriba.
    {
        "field1" : "algun texto",
        "field2" : 100,
        "field3" : "otro texto"
    }
    El contenido de los campos del json sera puesto dentro de los divs donde se encuentra definido
    el atributo data-content=""

    De este modo definimos la plantilla y la informacion que va a contener la plantilla tenemos que
     ejecutar y traducir/renderizar(render) la plantilla de jQuery

.// Renderizar la plantilla jQuery

    Dentro del documento tenemos que definir donde se va a posicionar el contenido renderizado.
    Entonces:
        Definimos la plantilla:
            <script type="text/html" id="templateID">
                <!-- el contenido de la plantilla -->
            </script>
        Ubicamos la plantilla dentro del documento HTML
            <div id="ContainerID">
                <!-- Aqui va el contenido de la plantilla renderizada -->
            </div>

        Nos hace falta llamar a la funcion .loadTemplate() usando la sintaxis de jquery
            $('ContainerID').loadTemplate('templateID', data);

    Podemos usar la plantilla decalarad desde un archivo externo y para esto tenemos que
        crear un archivo html e incluir dentro de su cuerpo la plantilla que vamos a utlizar.
        Nuestro archivo ejemplo.html quedaria asi:>
            <div class="contentWrapper">
                <div data-content="field1"></div>
                <div data-content="field2"></div>
                <div data-content="field3"></div>
            </div>
        Ahora ejecutamos el plugin indicando la ubicacion de la plantilla que en este caso
        esta en el archivo ejemplo.html
            $('ContainerID').loadTemplate('ruta/ejemplo.html', data);

.// Usando formateadores

        jQyery Template tiene una caracteristica que permite definir simples
                funciones llamadas formateadores.
        formateadores son una simples funciones que permiten transformar el valor de los
            datos del campo de datos.
        Entonces los formateadores pueden agarrar el valor del campo de dato y puede darle
            un formato o transformarlo de alguna manera.

        1. Definimos una funcion formateadora usando la funcion addTemplateFormatter, que va
            a tomar el valor y lo va a transformar.
            $.addTemplateFormatter("UpperCaseFormatter",
                    function (value, options) {
                        return value.toUpperCase();
                    });
            En este ejemplo defenimos el formateador con el nombre de "UpperCaseFormatter" que sera
                una funcion que recibe 2 argumentos, el primer arguemnto es el valor que va
                a ser transformado/formateado, que proviene de la informacion pasada a jQuery
                Template. El segundo argumento son opciones que podemos pasar al formateador.

        Para usar la funcion formateadora tenemos que:
            .agregar el atributo data-format="" al campo cuyo dato que se quiere formatear
            .agregar el atributo data-format-options="option data", es opcional y todo lo que
                agreguemos en el valor de este atributo pasara al argumento options de la
                funcion formateadora

        2. Aplicamos la funcion formateadora dentro de la plantilla
            <div class="contentWrapper">
                <div data-content="field1"></div>
                <div data-content="field2"></div>
                <div data-content="field3" data-format="UpperCaseFormatter"
                data-format-options="option data"></div>
            </div>

.// paginacion con jQuery Template

    Vamos a ver como crear las plantillas paginadas y algunas opciones de vinculacion.
    Primero veamos como podemos crear plantillas paginadas y para esto vamos a volver a ver
    la funcion loadTemplate("templateId", data, options):
        .1er parametro: determinamos la ubicacion de la plantilla, el id del elemento o la ruta
            del archivo externo
        .2o parametro: es un objeto json que contiene los datos o la infomracion a la que se
            quiere aplicar la plantilla
        .3er parametro: es un objeto que permite definir las opciones de como se van a cargar
            los datos/informacion en la pagina que tiene paginacion

    Veamos el objeto de opciones
    var opciones = {
        paged: true,    // activar paginacion
        pageNo: 1,      // mostrar la pagina inicial
        elemPerPage: 5  // total elementos por pagina a mostrar en cada paginacion
    }

.// Opciones de vinculacion de jQuery Template

    Las opciones de vinculacion de jQuery Template permiten vincular/juntar la informacion.

        prepend:    Inserta el contenido templado al principio del contenedor de plantilla
                        en lugar de reemplazar el contenido
        append:     Pone el contenido al final del contenedor de plantilla

    Por defecto al llamar la funcion loadTemplate, jQuery Template reemplaza la informacion
    dentro del contendor que se encuentra en la pagina donde va la plantilla.
    Y esto puede ser un gran problema cuando la informacion proviene de diferentes fuentes,
    porque una va a reemplazar la otra y no es lo que queremos. En lugar de reemplazar la informacion
    queremos agregar al principio o al final del contenedor que contiene la plantilla.

    jQuery tambien tiene algunas funciones callback():
    funcion callback: es la funcion de devolucion de llamada

        complete(): la funcion de devolucion de llamada es llamada despues de insertar
                        los datos/informacion dentro de la plantilla. A esta funcion
                        no le interesa el resultado de la insercion si fue exitosa o
                        si fallo la insercion dentro de la plantilla.

        success():  la funcion de devolucion de llamada es ejecutada despues de que
                        la informacion fue insertada con exito dentro de la plantilla

        error():    la funcion de devolucion de llamada es ejecutada cuando ocurre un error
                        al insertar la informacion dentro de la plantilla

        beforeInsert()  :   la funcion de devolucion de llamada es ejecutada antes de
                                insertar la informacion dentro de la plantilla

        beforeInsert()  :   la funcion de devolucion de llamada es ejecutada despues de
                                        insertar la informacion dentro de la plantilla

